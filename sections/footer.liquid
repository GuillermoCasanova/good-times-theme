{% comment %}theme-check-disable UndefinedObject{% endcomment %}
{{ 'section-footer.css' | asset_url | stylesheet_tag }}


<footer class="footer"> 
  <div class="footer__inner">

    {% for block in section.blocks %}
        {%- case block.type -%}
        {%- when 'social_links'%}
          <ul class="footer__menu  footer__menu--social">
          {%- for link in block.settings.social_links.links -%}
            <li class="footer__menu__item">  

            {% if link.url contains 'instagram' %}
              {% assign account = 'Instagram' %}
            {%elsif link.url contains 'youtube'%}
               {% assign account = 'YouTube' %}
            {%elsif link.url contains 'twitter'%}
              {% assign account = 'Twitter' %}
            {% endif %}


              <a class="footer__menu__link   footer__menu__link--social" href="{{ link.url }}" title="Visit Good Times on {{ account }}" rel="external" target="_blank">
                {% if account contains 'Instagram' %}
                  <svg aria-hidden="true" focusable="false" role="presentation" class="footer__menu__link-icon">
                    <use href="#icon-instagram">
                  </svg>
                {%elsif account contains 'YouTube'%}
                    <svg aria-hidden="true" focusable="false" role="presentation"  class="footer__menu__link-icon footer__menu__link-icon--youtube">
                      <use href="#icon-youtube">
                    </svg>
                {%elsif account contains 'Twitter'%}
                    TW
                {% endif %}

                {% unless link.url contains 'youtube' %}
                  <span>{{ link.title }}</span> 
                {%- endunless -%}

                <span class="visually-hidden">
                  {{ account }}
                </span>
              </a>
            </li>
          {%- endfor -%}
         </ul>

        {%- when 'link_list'%}
          <ul class="footer__menu">
            {%- for link in block.settings.footer_menu.links -%}
              <li class="footer__menu__item">
                <a class="footer__menu__link" href="{{ link.url }}" {%- if link.type == 'http_link' -%} rel="external"  target="_blank" {%else%} rel="internal" {% endif %}">
                 <span> {{ link.title }}</span>
                </a>
              </li>
            {%- endfor -%}
           </ul>
        {%- endcase %}
        
    {% endfor %}

    <div class="footer__credit">
      <div class="footer__we-got-you-container">
        <div class="footer__we-got-you">
          <svg aria-hidden="true" focusable="false" role="presentation">
            <use href="#graphic-we-got-you">
          </svg>
        </div>
      </div>

      <p class="footer__credit">
        {{ section.settings.copyright }}
      </p>
    </div>
  </div>

</footer> 

{%- render 'svg-graphics' -%}


{% javascript %}
  class LocalizationForm extends HTMLElement {
    constructor() {
      super();
      this.elements = {
        input: this.querySelector('input[name="locale_code"], input[name="country_code"]'),
        button: this.querySelector('button'),
        panel: this.querySelector('.disclosure__list-wrapper'),
      };
      this.elements.button.addEventListener('click', this.openSelector.bind(this));
      this.elements.button.addEventListener('focusout', this.closeSelector.bind(this));
      this.addEventListener('keyup', this.onContainerKeyUp.bind(this));

      this.querySelectorAll('a').forEach(item => item.addEventListener('click', this.onItemClick.bind(this)));
    }

    hidePanel() {
      this.elements.button.setAttribute('aria-expanded', 'false');
      this.elements.panel.setAttribute('hidden', true);
    }

    onContainerKeyUp(event) {
      if (event.code.toUpperCase() !== 'ESCAPE') return;

      this.hidePanel();
      this.elements.button.focus();
    }

    onItemClick(event) {
      event.preventDefault();
      const form = this.querySelector('form');
      this.elements.input.value = event.currentTarget.dataset.value;
      if (form) form.submit();
    }

    openSelector() {
      this.elements.button.focus();
      this.elements.panel.toggleAttribute('hidden');
      this.elements.button.setAttribute('aria-expanded', (this.elements.button.getAttribute('aria-expanded') === 'false').toString());
    }

    closeSelector(event) {
      const shouldClose = event.relatedTarget && event.relatedTarget.nodeName === 'BUTTON';
      if (event.relatedTarget === null || shouldClose) {
        this.hidePanel();
      }
    }
  }

  customElements.define('localization-form', LocalizationForm);
{% endjavascript %}

{% schema %}
{
  "name": "t:sections.footer.name",
  "blocks": [
    {
      "type": "link_list",
      "name": "t:sections.footer.blocks.link_list.name",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "Quick links",
          "label": "t:sections.footer.blocks.link_list.settings.heading.label",
          "info": "t:sections.footer.blocks.link_list.settings.heading.info"
        },
        {
          "type": "link_list",
          "id": "footer_menu",
          "default": "footer",
          "label": "t:sections.footer.blocks.link_list.settings.menu.label",
          "info": "t:sections.footer.blocks.link_list.settings.menu.info"
        }
      ]
    },
    {
      "type": "social_links",
      "name": "Social Links",
      "settings": [
        {
          "type": "link_list",
          "id": "social_links",
          "label": "Social Links Menu"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "text",
      "label": "Copyright Text",
      "id": "copyright"
    }
  ],
  "default": {
    "blocks": [
      {
        "type": "link_list"
      },
      {
        "type": "social_links"
      }
    ]
  }
}
{% endschema %}
